[project]
name = "my_finance"
version = "0.1.0"
description = "Graph RAG-powered DCF valuation system"
authors = ["Your Name <your.email@example.com>"]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[dependencies]
# Core cross-platform dependencies
python = "3.12.*"
openjdk = "17.*"
git = "*"
# ansible and psutil are installed via pip in the 'setup-env' task

# Essential Python packages
pip = "*"
pyyaml = "*"
requests = "*"
beautifulsoup4 = "*"
pandas = "*"
numpy = "*"
matplotlib = "*"
seaborn = "*"
jupyter = "*"
black = "*"
isort = "*"
pylint = "*"
mypy = "*"
pytest = ">=8.4.1,<9"
pytest-cov = ">=6.2.1,<7"
python-dotenv = "*"
click = "*"
tqdm = "*"
lxml = "*"
# Neo4j Python driver (official driver for connecting to Neo4j)
neo4j-python-driver = "*"

[tasks]
# ================================================================================
# P3 COMMAND SYSTEM - Primary Interface for All Operations  
# ================================================================================
# WORKFLOW: pixi shell -> p3 <command>
# Use tab completion: p3 <TAB> to see all available commands with descriptions

# --- P3 Help System ---
p3 = """echo 'ðŸš€ P3 Command System - Type: p3 <TAB> for completion
ðŸ“– Main Commands:
   build     - Fast F2 build (dev default)  
   test      - Run full test suite with coverage
   clean     - Clean all build artifacts
   lint      - Format code (black + isort)
   status    - Check environment status

ðŸ§¬ DCF Analysis:
   dcf       - Quick DCF analysis
   dcf-f2    - Fast 2-company analysis  
   dcf-m7    - Full Magnificent 7 analysis

ðŸ”§ Environment:
   env-start - Start all services (Podman + Neo4j)
   env-stop  - Stop all services
   env-reset - Reset environment (destructive)

ðŸ“¦ Release:
   release   - Interactive build selection & release
   pr        - Create pull request with testing
'"""

p3-help = "echo 'Available: build test clean lint status | dcf dcf-f2 dcf-m7 | env-start env-stop env-reset | release pr'"

# ================================================================================
# CORE P3 COMMANDS - Primary Development Interface
# ================================================================================

# --- Build & Development Commands ---
build = "python ETL/build_dataset.py f2"  # Default: fast F2 build
build-f2 = "python ETL/build_dataset.py f2"
build-m7 = "python ETL/build_dataset.py m7" 
build-n100 = "python ETL/build_dataset.py n100"
build-v3k = "python ETL/build_dataset.py v3k"

# --- Testing & Quality Commands ---
test = "python -m pytest tests/ -v --cov=ETL --cov=dcf_engine --cov-report=html"
lint = "python -m black --line-length 100 . && python -m isort ."
clean = "python -c 'import shutil; from pathlib import Path; build_dir = Path(\"data/stage_99_build\"); [shutil.rmtree(d) for d in build_dir.glob(\"build_*\") if d.is_dir()]; print(\"ðŸ§¹ Cleaned\")'"

# --- Status & Development ---
status = "python infra/comprehensive_env_status.py"
dev = "echo 'ðŸš€ Development Ready! Try: p3 build (fast) or p3 build-m7'"

# --- DCF Analysis Commands ---
dcf = "python dcf_engine/pure_llm_dcf.py"
dcf-f2 = "python ETL/build_dataset.py f2"
dcf-m7 = "python ETL/build_dataset.py m7"

# --- Environment Management Commands ---
env-start = "ansible-playbook infra/ansible/start.yml"
env-stop = "ansible-playbook infra/ansible/stop.yml"
env-status = "python infra/comprehensive_env_status.py"
env-reset = "ansible-playbook infra/ansible/reset.yml"
env-setup = "pip install ansible psutil && ansible-playbook infra/ansible/init.yml"

# --- Release & PR Commands ---
release = "python scripts/manage_build_data.py release"
pr = "python infra/create_pr_with_improved_testing.py"
pr-legacy = "python infra/create_pr_with_test.py"

# --- Tab Completion Setup ---
setup-completion = "python scripts/setup_p3_completion.py"

# --- Missing P3 Commands for Full Documentation Coverage ---
update-stock-lists = "python ETL/fetch_ticker_lists.py"
validate-strategy = "python ETL/manage.py validate"  
run-job = "python ETL/run_job.py"
commit-data-changes = "python infra/commit_data_changes.py"
create-build = "python scripts/manage_build_data.py create"

# Branch management commands
cleanup-branches = "python infra/cleanup_merged_branches.py"
cleanup-branches-auto = "python infra/cleanup_merged_branches.py --auto"
cleanup-branches-dry-run = "python infra/cleanup_merged_branches.py --dry-run"

# Neo4j container management  
neo4j-connect = "podman exec -it neo4j-finance cypher-shell -u neo4j -p finance123"
neo4j-restart = "podman restart neo4j-finance"
neo4j-start = "podman start neo4j-finance"
neo4j-stop = "podman stop neo4j-finance"

# Testing aliases
test-e2e = "python infra/create_pr_with_test.py --skip-pr"

# Improved M7 testing with commit markers (no conflict files)
test-m7-mark = "python infra/test_marker_system.py run-test"
check-test-marker = "python infra/test_marker_system.py check"

# Legacy command aliases for backward compatibility
generate-report = "python dcf_engine/pure_llm_dcf.py"
neo4j-logs = "podman logs neo4j-finance"
podman-status = "podman ps -a --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'"

# ================================================================================
# EXTENDED COMMANDS - Additional utilities and backward compatibility
# ================================================================================

# Essential utilities
activate = "echo 'Pixi environment activated'"
quick-test = "python -m pytest tests/test_basic_structure.py -v"
build-dataset = "python ETL/build_dataset.py"
pip-install = "pip install neomodel sentence-transformers"

# Additional development tools (no duplicates of P3 commands)
typecheck = "python -m mypy ETL dcf_engine common graph_rag --ignore-missing-imports"
build-status = "python -c 'from common.build_tracker import BuildTracker; bt=BuildTracker.get_latest_build(); print(bt.get_build_status() if bt else \"No builds found\")'"
build-size = "python -c 'from pathlib import Path; import subprocess; result = subprocess.run([\"du\", \"-sh\", \"data/stage_99_build\"], capture_output=True, text=True); print(f\"ðŸ“¦ Build directory size: {result.stdout.strip()}\")'"
