[project]
name = "my_finance"
version = "0.1.0"
description = "Graph RAG-powered DCF valuation system"
authors = ["Your Name <your.email@example.com>"]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[dependencies]
# Core cross-platform dependencies
python = "3.12.*"
openjdk = "17.*"
git = "*"
# ansible and psutil are installed via pip in the 'setup-env' task

# Essential Python packages
pip = "*"
pyyaml = ">=6.0.2,<7"
requests = ">=2.32.5,<3"
beautifulsoup4 = ">=4.13.5,<5"
pandas = ">=2.3.2,<3"
matplotlib = "*"
seaborn = "*"
jupyter = "*"
black = ">=25.1.0,<26"
isort = "*"
pylint = "*"
mypy = "*"
pytest = ">=8.4.2,<9"
pytest-cov = ">=6.2.1,<7"
python-dotenv = "*"
click = ">=8.2.1,<9"
tqdm = "*"
lxml = "*"
# Neo4j Python driver (official driver for connecting to Neo4j)
neo4j-python-driver = "*"
yfinance = ">=0.2.57,<0.3"
attrs = ">=25.3.0,<26"
faiss-cpu = ">=1.9.0,<2"
pyarrow = ">=21.0.0,<22"
python-dateutil = ">=2.9.0.post0,<3"
pathspec = ">=0.12.1,<0.13"
platformdirs = ">=4.3.8,<5"
numpy = ">=1.26.4,<2"
pluggy = ">=1.6.0,<2"

[tasks]
# === PIXI ENVIRONMENT MANAGEMENT ===
# Pixi only manages dependencies and environment, does NOT call p3
# Use p3 commands directly instead of pixi run

# Environment activation (pixi's core responsibility)
shell = "pixi shell"

# Direct Python execution for scripts that need pixi environment
python = "python"
pytest-direct = "python -m pytest"
black-direct = "python -m black"
mypy-direct = "python -m mypy"

# === COMPREHENSIVE TESTING STRATEGY ===
# P3-aligned testing that ensures p3 test is superset of CI tests

# Primary CI-aligned tests (same as CI workflow)
test-ci-unit = "python -m pytest common/tests/unit/ -v --tb=short --maxfail=20 --cov=common --cov-report=term-missing --cov-fail-under=70"
test-ci-integration = "python -m pytest common/tests/integration/ -v --tb=short --cov=common --cov-report=term-missing"
test-ci-complete = "python -m pytest common/tests/ --cov=common --cov-report=html:common/tests/coverage_html --cov-report=xml:common/tests/coverage.xml --cov-report=term-missing --cov-fail-under=80"

# Legacy common module tasks (maintained for compatibility)
test-common = "python -m pytest common/tests/ --cov=common --cov-report=html:common/tests/coverage_html --cov-report=term-missing --cov-fail-under=80"
test-common-unit = "python -m pytest common/tests/unit/ --cov=common --cov-report=term-missing"
test-common-integration = "python -m pytest common/tests/integration/ --cov=common --cov-report=term-missing"
test-common-coverage = "python -m pytest common/tests/ --cov=common --cov-report=html:common/tests/coverage_html --cov-report=xml:common/tests/coverage.xml --cov-report=term-missing"
test-common-check = "python common/tests/pytest_runner.py --check"

# Test by markers (CI-aligned)
test-core = "python -m pytest -m core --tb=short -v --maxfail=10"
test-agents = "python -m pytest -m agents --tb=short -v" 
test-build = "python -m pytest -m build --tb=short -v"
test-monitoring = "python -m pytest -m monitoring --tb=short -v"
test-schemas = "python -m pytest -m schemas --tb=short -v"

# Fast development testing (for quick validation during development)
test-fast = "python -m pytest common/tests/unit/ -x --tb=short --disable-warnings"
test-quick = "python -m pytest common/tests/unit/ --tb=line -q --disable-warnings"

# Development environment validation
check-env = "python -c 'import sys; print(f\"Python: {sys.version}\"); print(\"✅ Pixi environment ready\")'"

# Direct service commands that don't require p3 (for system integration)
ollama-status = "curl -s http://localhost:11434/api/tags 2>/dev/null && echo 'Ollama: ✅ Running' || echo 'Ollama: ❌ Not running'"
ollama-models = "ollama list"

# Package installation (pixi's responsibility)  
pip-install = "pip install neomodel"

# Quick development hints
dev-help = "echo '🚀 Use p3 commands directly: p3 build f2 | p3 test | p3 ship'; echo '💡 Completion: source ./scripts/p3-completion.zsh'"

# === WORKTREE ISOLATION MANAGEMENT ===
# Automatic worktree Python environment isolation
worktree-init = "python scripts/worktree_isolation.py init"
worktree-status = "python scripts/worktree_isolation.py status"
worktree-verify = "python scripts/worktree_isolation.py verify"

# Global infrastructure management (ansible/docker reuse)
global-setup = "python scripts/worktree_isolation.py setup-global"

# === GLOBAL INFRASTRUCTURE REUSE ===
# Ansible commands - 全局复用但使用worktree Python环境
ansible-setup = "ansible-playbook infra/ansible/setup.yml"
ansible-env-status = "ansible-playbook infra/ansible/roles/repo_code.yml --tags env_check"

# Docker commands - 全局复用
docker-neo4j-start = "cd infra && docker-compose up -d neo4j"
docker-neo4j-stop = "cd infra && docker-compose stop neo4j"
docker-status = "cd infra && docker-compose ps"

[pypi-dependencies]
secedgar = ">=0.6.0, <0.7"
aiohttp = ">=3.12.15, <4"
typing-extensions = "*"
neo4j = "*"
# ML dependencies moved to Docker container (infra/sentence-transformers.Dockerfile)
# sentence-transformers, torch, scikit-learn removed to avoid numpy circular import
