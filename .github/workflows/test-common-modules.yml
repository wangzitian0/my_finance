name: Common Module Tests

on:
  push:
    branches: [ main, 'feature/**', 'hotfix/**' ]
    paths:
      - 'common/**'
      - 'requirements-test.txt'
      - '.github/workflows/test-common-modules.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'common/**'
      - 'requirements-test.txt'
      - '.github/workflows/test-common-modules.yml'

env:
  PYTHONPATH: ${{ github.workspace }}
  TESTING: true
  LOG_LEVEL: DEBUG

jobs:
  test-common-modules:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
      with:
        submodules: false
        
    - name: "üì¶ Setup Pixi Environment"
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.50.2
        
    - name: "üß™ Install Additional Test Dependencies"
      run: |
        echo "üì¶ Installing additional test utilities in pixi environment"
        pixi run pip install pytest-mock pytest-asyncio factory-boy freezegun responses pytest-benchmark pytest-xdist parameterized testfixtures
        
    - name: "üèóÔ∏è Setup Test Environment"
      run: |
        echo "üöÄ Setting up common module test environment"
        
        # Create required directories for testing
        mkdir -p build_data/{stage_00_raw,stage_01_daily_delta,stage_04_query_results}
        mkdir -p common/config logs temp cache
        
        # Create minimal test configuration
        cat > common/config/test_config.yml << 'EOF'
        storage:
          backend: "local_filesystem"
          root_path: "build_data"
        
        layers:
          stage_00_raw: "Raw Data Layer"
          stage_01_daily_delta: "Daily Delta Layer"
          stage_04_query_results: "Query Results Layer"
        
        logging:
          level: "DEBUG"
          directory: "logs"
        
        common:
          config: "common/config"
          logs: "logs"
          temp: "temp"
          cache: "cache"
        EOF
        
        echo "‚úÖ Test environment setup completed"
        
    - name: "üß™ Run Unit Tests"
      run: |
        echo "üß™ Running common module unit tests"
        pixi run python -m pytest common/tests/unit/ \
          --verbose \
          --tb=short \
          --junitxml=common/tests/junit-unit.xml \
          --cov=common \
          --cov-report=xml:common/tests/coverage-unit.xml \
          --cov-report=html:common/tests/coverage_html_unit \
          --cov-report=term-missing \
          --cov-fail-under=70
          
    - name: "üîó Run Integration Tests"
      run: |
        echo "üîó Running common module integration tests"
        pixi run python -m pytest common/tests/integration/ \
          --verbose \
          --tb=short \
          --junitxml=common/tests/junit-integration.xml \
          --cov=common \
          --cov-append \
          --cov-report=xml:common/tests/coverage-integration.xml \
          --cov-report=html:common/tests/coverage_html_integration \
          --cov-report=term-missing
          
    - name: "üìä Generate Combined Coverage Report"
      run: |
        echo "üìä Generating combined coverage report"
        pixi run python -m pytest common/tests/ \
          --cov=common \
          --cov-report=xml:common/tests/coverage-combined.xml \
          --cov-report=html:common/tests/coverage_html_combined \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --tb=no \
          --quiet
          
        echo "‚úÖ Combined coverage report generated"
        
    - name: "üéØ Coverage Validation"
      run: |
        echo "üéØ Validating test coverage meets 80% requirement"
        
        # Extract coverage percentage from coverage report
        if [ -f "common/tests/coverage-combined.xml" ]; then
          coverage_percent=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('common/tests/coverage-combined.xml')
            root = tree.getroot()
            line_rate = root.attrib.get('line-rate', '0')
            coverage = float(line_rate) * 100
            print(f'{coverage:.1f}')
        except Exception as e:
            print('0.0')
          ")
          
          echo "üìà Current coverage: ${coverage_percent}%"
          
          # Check if coverage meets requirement
          if (( $(echo "${coverage_percent} >= 80.0" | bc -l) )); then
            echo "‚úÖ Coverage requirement met (${coverage_percent}% >= 80%)"
          else
            echo "‚ùå Coverage requirement not met (${coverage_percent}% < 80%)"
            echo "üîç Please add more tests to improve coverage"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  Coverage file not found, assuming tests passed"
        fi
        
    - name: "üß™ Test Structure Validation"
      run: |
        echo "üß™ Validating test structure and completeness"
        pixi run python common/tests/pytest_runner.py --check
        
    - name: "üè∑Ô∏è Test by Markers"
      run: |
        echo "üè∑Ô∏è Running tests by markers to ensure proper organization"
        
        echo "üîß Core module tests:"
        pixi run python -m pytest -m "core" --tb=short -v || true
        
        echo "ü§ñ Agent module tests:"
        pixi run python -m pytest -m "agents" --tb=short -v || true
        
        echo "üèóÔ∏è  Build module tests:"
        pixi run python -m pytest -m "build" --tb=short -v || true
        
        echo "üìä Monitoring module tests:"
        pixi run python -m pytest -m "monitoring" --tb=short -v || true
        
        echo "üìã Schema module tests:"
        pixi run python -m pytest -m "schemas" --tb=short -v || true
        
    - name: "üìã Upload Test Results"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: common-module-test-results
        path: |
          common/tests/junit-*.xml
          common/tests/coverage*.xml
          common/tests/coverage_html_*
        retention-days: 7
        
    - name: "üìä Upload Coverage to Codecov"
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: common/tests/coverage-combined.xml
        flags: common-modules
        name: common-module-coverage
        fail_ci_if_error: false
        
    - name: "üí¨ Coverage Comment"
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        header: common-module-coverage
        message: |
          ## üìä Common Module Test Coverage
          
          Coverage report for common module tests:
          
          - **Unit Tests**: ‚úÖ Passed
          - **Integration Tests**: ‚úÖ Passed  
          - **Combined Coverage**: Target 80%+
          
          üìà [View detailed coverage report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
    - name: "üßπ Cleanup Test Artifacts"  
      if: always()
      run: |
        echo "üßπ Cleaning up test artifacts"
        rm -rf build_data/test_*
        rm -rf temp/* cache/* || true
        echo "‚úÖ Cleanup completed"