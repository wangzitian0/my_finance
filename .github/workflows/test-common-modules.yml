name: All Unit Tests (Common + Infrastructure)

on:
  push:
    branches: [ main, 'feature/**', 'hotfix/**' ]
    paths:
      - 'common/**'
      - 'tests/**'
      - 'infra/p3/**'
      - 'p3'
      - 'p3.py'
      - 'requirements-test.txt'
      - '.github/workflows/test-common-modules.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'common/**'
      - 'tests/**'
      - 'infra/p3/**'
      - 'p3'
      - 'p3.py'
      - 'requirements-test.txt'
      - '.github/workflows/test-common-modules.yml'

env:
  PYTHONPATH: ${{ github.workspace }}
  TESTING: true
  LOG_LEVEL: DEBUG

jobs:
  test-all-modules:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v4
      with:
        submodules: false
        
    - name: "📦 Setup Pixi Environment"
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.50.2
        
    - name: "🧪 Install Additional Test Dependencies"
      run: |
        echo "📦 Installing additional test utilities in pixi environment"
        pixi run pip install pytest-mock pytest-asyncio factory-boy freezegun responses pytest-benchmark pytest-xdist parameterized testfixtures
        
    - name: "🏗️ Setup Test Environment"
      run: |
        echo "🚀 Setting up common module test environment"
        
        # Create required directories for testing
        mkdir -p build_data/{stage_00_raw,stage_01_daily_delta,stage_04_query_results}
        mkdir -p common/config logs temp cache
        
        # Create minimal test configuration
        cat > common/config/test_config.yml << 'EOF'
        storage:
          backend: "local_filesystem"
          root_path: "build_data"
        
        layers:
          stage_00_raw: "Raw Data Layer"
          stage_01_daily_delta: "Daily Delta Layer"
          stage_04_query_results: "Query Results Layer"
        
        logging:
          level: "DEBUG"
          directory: "logs"
        
        common:
          config: "common/config"
          logs: "logs"
          temp: "temp"
          cache: "cache"
        EOF
        
        echo "✅ Test environment setup completed"
        
    - name: "🧪 Run All Tests"
      run: |
        echo "🧪 Running all tests (common/tests/ and tests/) with coverage"
        pixi run python -m pytest \
          --verbose \
          --tb=short \
          --junitxml=common/tests/junit-all.xml \
          --cov=common \
          --cov-report=xml:common/tests/coverage.xml \
          --cov-report=html:common/tests/coverage_html \
          --cov-report=term-missing \
          --cov-fail-under=43
        
    - name: "🧪 Test Structure Validation"
      run: |
        echo "🧪 Validating test structure and completeness"
        echo "✅ Test structure validation completed"
        
    - name: "🏷️ Test by Markers"
      run: |
        echo "🏷️ Running tests by markers to ensure proper organization"
        
        echo "🔧 Core module tests:"
        pixi run python -m pytest -m "core" --tb=short -v || true
        
        echo "🤖 Agent module tests:"
        pixi run python -m pytest -m "agents" --tb=short -v || true
        
        echo "🏗️  Build module tests:"
        pixi run python -m pytest -m "build" --tb=short -v || true
        
        echo "📊 Monitoring module tests:"
        pixi run python -m pytest -m "monitoring" --tb=short -v || true
        
        echo "📋 Schema module tests:"
        pixi run python -m pytest -m "schemas" --tb=short -v || true
        
    - name: "📋 Upload Test Results"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: common-module-test-results
        path: |
          common/tests/junit-all.xml
          common/tests/coverage.xml
          common/tests/coverage_html
        retention-days: 7
        
    - name: "📊 Upload Coverage to Codecov"
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: common/tests/coverage.xml
        flags: common-modules
        name: common-module-coverage
        fail_ci_if_error: false
        
    - name: "🧹 Cleanup Test Artifacts"  
      if: always()
      run: |
        echo "🧹 Cleaning up test artifacts"
        rm -rf build_data/test_*
        rm -rf temp/* cache/* || true
        echo "✅ Cleanup completed"