name: Post-Merge CI Analysis

# Automated CI validation and Claude analysis after code merges to main
on:
  push:
    branches: [main]
  # Manual trigger for testing
  workflow_dispatch:

env:
  PYTHONPATH: ${{ github.workspace }}
  TESTING: true
  LOG_LEVEL: DEBUG

jobs:
  post-merge-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write  # Need write permission to create commit comments
      issues: write
      pull-requests: write  # Need write permission to comment on PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Setup Pixi Environment
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.50.2
          cache: true  # Enable caching for better performance
          cache-write: ${{ github.event_name != 'pull_request' }}  # Only write cache on main branch

      - name: Install Test Dependencies
        run: |
          pixi run pip install pytest-mock pytest-asyncio factory-boy freezegun responses pytest-benchmark pytest-xdist parameterized testfixtures

      - name: Setup Test Environment
        run: |
          mkdir -p build_data/{stage_00_raw,stage_01_daily_delta,stage_04_query_results}
          mkdir -p common/config logs temp cache

          cat > common/config/test_config.yml << 'EOF'
          storage:
            backend: "local_filesystem"
            root_path: "build_data"
          layers:
            stage_00_raw: "Raw Data Layer"
            stage_01_daily_delta: "Daily Delta Layer"
            stage_04_query_results: "Query Results Layer"
          logging:
            level: "DEBUG"
            directory: "logs"
          common:
            config: "common/config"
            logs: "logs"
            temp: "temp"
            cache: "cache"
          EOF

      - name: Run CI Tests
        id: ci_tests
        run: |
          TESTS_PASSED=true
          TEST_SUMMARY=""

          # Unit tests with warnings suppression for known issues
          if pixi run python -m pytest common/tests/unit/ \
            --tb=short \
            --cov=common \
            --cov-fail-under=43 \
            --disable-warnings \
            -q; then
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚úÖ Unit Tests: Passed"
          else
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚ùå Unit Tests: Failed"
            TESTS_PASSED=false
          fi

          # Code formatting
          if pixi run python -m black --check common/ --diff; then
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚úÖ Code Formatting: Clean"
          else
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚ö†Ô∏è Code Formatting: Issues detected"
          fi

          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          {
            echo "test_summary<<EOF"
            echo -e "$TEST_SUMMARY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Extract PR Information
        id: pr_info
        run: |
          LATEST_PR=$(git log --oneline -5 | grep -o '#[0-9]\+' | head -1 | sed 's/#//' || echo "unknown")
          echo "pr_number=$LATEST_PR" >> $GITHUB_OUTPUT
          echo "commit_author=${{ github.event.head_commit.author.name }}" >> $GITHUB_OUTPUT
          COMMIT_TITLE=$(echo "${{ github.event.head_commit.message }}" | head -1)
          echo "commit_title=$COMMIT_TITLE" >> $GITHUB_OUTPUT

      - name: Create Tracking Issue for Post-merge Analysis
        id: create_issue
        if: always()
        run: |
          # Create a tracking issue for post-merge analysis
          ISSUE_TITLE="üìã Post-merge Analysis: PR #${{ steps.pr_info.outputs.pr_number }} - ${{ steps.pr_info.outputs.commit_title }}"

          ISSUE_BODY=$(cat << EOF
          # üìã Post-merge Analysis for PR #${{ steps.pr_info.outputs.pr_number }}

          **Merged PR**: #${{ steps.pr_info.outputs.pr_number }}
          **Author**: @${{ steps.pr_info.outputs.commit_author }}
          **Commit**: \`${{ github.sha }}\`
          **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## üéØ Analysis Tasks

          - [ ] Review TODO/FIXME comments needing follow-up
          - [ ] Check incomplete implementations or missing error handling
          - [ ] Verify test coverage for new functionality
          - [ ] Assess documentation completeness
          - [ ] Identify technical debt or performance concerns
          - [ ] Validate code quality and adherence to project patterns

          ## üìä CI Results
          ${{ steps.ci_tests.outputs.test_summary }}

          ## üîç Analysis Status

          üîÑ **Analysis in progress** - Claude will update this issue with findings.

          ---

          @claude Please analyze the merged changes from PR #${{ steps.pr_info.outputs.pr_number }} and update this issue with your findings. For any üî¥ Critical issues discovered, create separate issues and link them here.
          EOF
          )

          # Create the issue and capture output
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "post-merge-analysis,automation" \
            --assignee "${{ steps.pr_info.outputs.commit_author }}" > issue_creation_output.txt

          # Get the issue URL from the output
          ISSUE_URL=$(cat issue_creation_output.txt)
          ISSUE_NUMBER=$(echo $ISSUE_URL | sed 's/.*\/issues\///')

          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT

          # Clean up
          rm -f issue_creation_output.txt

      - name: Create PR Status Comment
        if: always()
        run: |
          if [ "${{ steps.ci_tests.outputs.tests_passed }}" == "true" ]; then
            STATUS_EMOJI="üéâ"
            STATUS_TEXT="**Post-merge CI passed!**"
            CI_STATUS="‚úÖ Passed"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="**Post-merge CI completed with issues**"
            CI_STATUS="‚ùå Issues Found"
          fi

          PR_COMMENT_BODY=$(cat << EOF
          $STATUS_EMOJI $STATUS_TEXT

          üìä **Ê£ÄÊü•‰ªªÂä°Áä∂ÊÄÅ:**
          - ${{ steps.ci_tests.outputs.tests_passed == 'true' && '‚úÖ' || '‚ùå' }} Unit Tests: [${{ steps.ci_tests.outputs.tests_passed == 'true' && 'Passed' || 'Failed' }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - ‚úÖ Code Quality: [Clean](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - üîÑ Code Analysis: [In Progress](${{ steps.create_issue.outputs.issue_url }})

          üìã **Analysis Details**: Issue #${{ steps.create_issue.outputs.issue_number }}
          üïê **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ---
          *Automated post-merge analysis initiated. Results will be tracked in the linked issue.*
          EOF
          )

          # Create comment on the PR
          gh api repos/${{ github.repository }}/issues/${{ steps.pr_info.outputs.pr_number }}/comments \
            --method POST \
            --field body="$PR_COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf build_data/test_* temp/* cache/* || true