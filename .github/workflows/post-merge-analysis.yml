name: Post-Merge CI Analysis

# Automated CI validation and Claude analysis after code merges to main
on:
  push:
    branches: [main]
  # Manual trigger for testing
  workflow_dispatch:

env:
  PYTHONPATH: ${{ github.workspace }}
  TESTING: true
  LOG_LEVEL: DEBUG

jobs:
  post-merge-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      issues: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Setup Pixi Environment
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.50.2

      - name: Install Test Dependencies
        run: |
          pixi run pip install pytest-mock pytest-asyncio factory-boy freezegun responses pytest-benchmark pytest-xdist parameterized testfixtures

      - name: Setup Test Environment
        run: |
          mkdir -p build_data/{stage_00_raw,stage_01_daily_delta,stage_04_query_results}
          mkdir -p common/config logs temp cache

          cat > common/config/test_config.yml << 'EOF'
          storage:
            backend: "local_filesystem"
            root_path: "build_data"
          layers:
            stage_00_raw: "Raw Data Layer"
            stage_01_daily_delta: "Daily Delta Layer"
            stage_04_query_results: "Query Results Layer"
          logging:
            level: "DEBUG"
            directory: "logs"
          common:
            config: "common/config"
            logs: "logs"
            temp: "temp"
            cache: "cache"
          EOF

      - name: Run CI Tests
        id: ci_tests
        run: |
          TESTS_PASSED=true
          TEST_SUMMARY=""

          # Unit tests
          if pixi run python -m pytest common/tests/unit/ --tb=short --cov=common --cov-fail-under=43; then
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚úÖ Unit Tests: Passed"
          else
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚ùå Unit Tests: Failed"
            TESTS_PASSED=false
          fi

          # Code formatting
          if pixi run python -m black --check common/ --diff; then
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚úÖ Code Formatting: Clean"
          else
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚ö†Ô∏è Code Formatting: Issues detected"
          fi

          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          {
            echo "test_summary<<EOF"
            echo -e "$TEST_SUMMARY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Extract PR Information
        id: pr_info
        run: |
          LATEST_PR=$(git log --oneline -5 | grep -o '#[0-9]\+' | head -1 | sed 's/#//' || echo "unknown")
          echo "pr_number=$LATEST_PR" >> $GITHUB_OUTPUT
          echo "commit_author=${{ github.event.head_commit.author.name }}" >> $GITHUB_OUTPUT
          COMMIT_TITLE=$(echo "${{ github.event.head_commit.message }}" | head -1)
          echo "commit_title=$COMMIT_TITLE" >> $GITHUB_OUTPUT

      - name: Create CI Status and Request Claude Analysis
        if: always()
        run: |
          if [ "${{ steps.ci_tests.outputs.tests_passed }}" == "true" ]; then
            STATUS_EMOJI="üéâ"
            STATUS_TEXT="**Post-merge CI passed!**"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="**Post-merge CI completed with issues**"
          fi

          COMMENT_BODY=$(cat << EOF
          $STATUS_EMOJI $STATUS_TEXT

          üìä **CI Results:**
          ${{ steps.ci_tests.outputs.test_summary }}

          üìã **Details:**
          - üîÄ PR: #${{ steps.pr_info.outputs.pr_number }}
          - üë§ Author: ${{ steps.pr_info.outputs.commit_author }}
          - üïê Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ---

          @claude Please analyze this merge for outstanding work items and create GitHub issues for any significant findings:
          - TODO/FIXME comments needing follow-up
          - Incomplete implementations or missing error handling
          - Missing tests or documentation
          - Technical debt or performance concerns

          Use priority labels: üî¥ Critical, üü° Important, üü¢ Minor
          EOF
          )

          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/comments \
            --method POST \
            --field body="$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf build_data/test_* temp/* cache/* || true