name: Post-Merge CI Analysis

# Automated CI validation and analysis after code merges to main
on:
  push:
    branches: [main]
  # Manual trigger for testing and maintenance
  workflow_dispatch:
    inputs:
      analysis_scope:
        description: 'Analysis scope (light/deep)'
        required: false
        default: 'light'
        type: choice
        options:
          - light
          - deep

env:
  PYTHONPATH: ${{ github.workspace }}
  TESTING: true
  LOG_LEVEL: DEBUG

jobs:
  post-merge-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write  # For commit comments
      issues: write
      pull-requests: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Get recent history for analysis

      - name: Setup Pixi Environment
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.50.2

      - name: Install Additional Dependencies
        run: |
          echo "üì¶ Installing additional test utilities in pixi environment"
          pixi run pip install pytest-mock pytest-asyncio factory-boy freezegun responses pytest-benchmark pytest-xdist parameterized testfixtures

      - name: Setup Test Environment
        run: |
          echo "üöÄ Setting up test environment"

          # Create required directories for testing
          mkdir -p build_data/{stage_00_raw,stage_01_daily_delta,stage_04_query_results}
          mkdir -p common/config logs temp cache

          # Create minimal test configuration
          cat > common/config/test_config.yml << 'EOF'
          storage:
            backend: "local_filesystem"
            root_path: "build_data"

          layers:
            stage_00_raw: "Raw Data Layer"
            stage_01_daily_delta: "Daily Delta Layer"
            stage_04_query_results: "Query Results Layer"

          logging:
            level: "DEBUG"
            directory: "logs"

          common:
            config: "common/config"
            logs: "logs"
            temp: "temp"
            cache: "cache"
          EOF

          echo "‚úÖ Test environment setup completed"

      - name: Run Full CI Test Suite
        id: ci_tests
        run: |
          echo "üß™ Running comprehensive CI test suite"

          # Track test results
          TESTS_PASSED=true
          TEST_SUMMARY=""

          # Unit tests with coverage
          echo "üî¨ Running unit tests..."
          if pixi run python -m pytest common/tests/unit/ \
            --verbose \
            --tb=short \
            --junitxml=common/tests/junit-all.xml \
            --cov=common \
            --cov-report=xml:common/tests/coverage.xml \
            --cov-report=html:common/tests/coverage_html \
            --cov-report=term-missing \
            --cov-fail-under=43; then
            echo "‚úÖ Unit tests passed"
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚úÖ Unit Tests: Passed"
          else
            echo "‚ùå Unit tests failed"
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚ùå Unit Tests: Failed"
            TESTS_PASSED=false
          fi

          # Test by markers
          echo "üè∑Ô∏è Running marker-based tests..."
          MARKER_RESULTS=""

          for marker in core agents build monitoring schemas; do
            echo "Testing marker: $marker"
            if pixi run python -m pytest -m "$marker" --tb=short -v -q; then
              MARKER_RESULTS="$MARKER_RESULTS\n  - ‚úÖ $marker tests: Passed"
            else
              MARKER_RESULTS="$MARKER_RESULTS\n  - ‚ö†Ô∏è $marker tests: Issues found or no tests"
            fi
          done

          TEST_SUMMARY="$TEST_SUMMARY\n- üè∑Ô∏è Marker Tests:$MARKER_RESULTS"

          # Code quality checks
          echo "üé® Running code quality checks..."
          if pixi run python -m black --check common/ --diff; then
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚úÖ Code Formatting: Clean"
          else
            echo "‚ö†Ô∏è Code formatting issues detected"
            TEST_SUMMARY="$TEST_SUMMARY\n- ‚ö†Ô∏è Code Formatting: Issues detected"
          fi

          # Store results for next steps
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT

          # Format test summary for comment
          {
            echo "test_summary<<EOF"
            echo -e "$TEST_SUMMARY"
            echo "EOF"
          } >> $GITHUB_OUTPUT

          echo "üéØ CI test suite completed"

      - name: Extract Merged PR Information
        id: pr_info
        run: |
          # Get the latest merged PR number from commit messages
          LATEST_PR=$(git log --oneline -5 | grep -o '#[0-9]\+' | head -1 | sed 's/#//' || echo "unknown")
          echo "pr_number=$LATEST_PR" >> $GITHUB_OUTPUT

          # Get commit info
          COMMIT_AUTHOR="${{ github.event.head_commit.author.name }}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"

          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT

          # Extract first line of commit message
          COMMIT_TITLE=$(echo "$COMMIT_MESSAGE" | head -1)
          echo "commit_title=$COMMIT_TITLE" >> $GITHUB_OUTPUT

      - name: Create CI Status Comment
        if: always()
        run: |
          # Determine overall status
          if [ "${{ steps.ci_tests.outputs.tests_passed }}" == "true" ]; then
            STATUS_EMOJI="üéâ"
            STATUS_TEXT="**Post-merge CI passed!**"
            CI_STATUS="‚úÖ Success"
          else
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_TEXT="**Post-merge CI completed with issues**"
            CI_STATUS="‚ùå Issues Found"
          fi

          # Create comprehensive comment
          COMMENT_BODY=$(cat << EOF
          $STATUS_EMOJI $STATUS_TEXT

          üìä **CI Results Summary:**
          ${{ steps.ci_tests.outputs.test_summary }}

          üìã **Merge Details:**
          - üîÄ PR: #${{ steps.pr_info.outputs.pr_number }}
          - üë§ Author: ${{ steps.pr_info.outputs.commit_author }}
          - üìù Title: ${{ steps.pr_info.outputs.commit_title }}
          - üïê Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - üÜî Commit: \`${{ github.sha }}\`

          ---

          @claude Please analyze this merge for any outstanding work items:

          **üîç Analysis Request:**
          - Review TODO/FIXME comments that need follow-up
          - Identify incomplete implementations or missing error handling
          - Check for missing tests or documentation
          - Look for any technical debt or performance concerns
          - Assess code quality and adherence to project patterns

          **üìã Action Items:**
          If you find significant issues, please create GitHub issues with:
          - üî¥ **Critical**: Security/bugs requiring immediate attention
          - üü° **Important**: Quality/debt requiring timely resolution
          - üü¢ **Minor**: Improvements for future consideration

          Focus on actionable items that will improve code quality and project maintainability.
          EOF
          )

          # Create the commit comment using GitHub API
          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/comments \
            --method POST \
            --field body="$COMMENT_BODY"

          echo "‚úÖ Created commit comment with CI results and Claude analysis request"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Analysis Tracking Log
        if: always()
        run: |
          # Create/update analysis log
          mkdir -p .github/analysis-logs
          LOG_FILE=".github/analysis-logs/post-merge-$(date +%Y-%m).log"

          # Add entry to monthly log
          cat >> "$LOG_FILE" << EOF
          [$(date -u '+%Y-%m-%d %H:%M:%S UTC')] Post-merge analysis initiated
          Commit: ${{ github.sha }}
          PR: #${{ steps.pr_info.outputs.pr_number }}
          Author: ${{ steps.pr_info.outputs.commit_author }}
          CI Status: ${{ steps.ci_tests.outputs.tests_passed == 'true' && 'Passed' || 'Issues Found' }}
          Claude Analysis: Requested via commit comment
          ---
          EOF

          echo "üìä Updated analysis tracking log: $LOG_FILE"

      - name: Commit Analysis Log Updates
        if: always()
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add and commit log updates if any changes exist
          git add .github/analysis-logs/ || true

          if git diff --cached --quiet; then
            echo "üìù No log changes to commit"
          else
            git commit -m "üìä Update post-merge analysis log

          Analysis completed for commit ${{ github.sha }}
          PR: #${{ steps.pr_info.outputs.pr_number }}

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"

            git push || echo "No changes to push"
            echo "‚úÖ Analysis log committed and pushed"
          fi

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: post-merge-test-results-${{ github.sha }}
          path: |
            common/tests/junit-all.xml
            common/tests/coverage.xml
            common/tests/coverage_html
            .github/analysis-logs/
          retention-days: 30

      - name: Cleanup Test Environment
        if: always()
        run: |
          echo "üßπ Cleaning up test environment"
          rm -rf build_data/test_* temp/* cache/* || true
          echo "‚úÖ Cleanup completed"