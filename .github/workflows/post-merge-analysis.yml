name: Post-Merge Analysis

# Automated analysis after code merges to main
on:
  push:
    branches: [main]
  # Manual trigger for testing and maintenance
  workflow_dispatch:
    inputs:
      analysis_scope:
        description: 'Analysis scope (light/deep)'
        required: false
        default: 'light'
        type: choice
        options:
          - light
          - deep

jobs:
  post-merge-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Get recent history for analysis

      - name: Run Post-Merge Code Review
        id: analysis
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Analysis prompt for post-merge review
          direct_prompt: |
            **Post-Merge Code Analysis**

            Please analyze the merged changes and identify:

            **1. Outstanding Work Items:**
            - Unfinished implementations (marked or unmarked)
            - TODO/FIXME comments that need follow-up
            - Incomplete error handling or edge cases
            - Missing tests for new functionality
            - Missing or incomplete documentation

            **2. Quality Issues:**
            - Potential bugs or logic issues
            - Performance concerns
            - Security vulnerabilities
            - Code that doesn't follow project patterns

            **3. Technical Debt:**
            - Temporary workarounds that need proper fixes
            - Duplicated code that should be refactored
            - Dependencies that need updating

            **Format Response:**
            For each category, list specific items with file locations. If significant issues are found, recommend creating follow-up issues.

            **Priority:**
            - 🔴 Critical: Security/bugs requiring immediate attention
            - 🟡 Important: Quality/debt requiring timely resolution
            - 🟢 Minor: Improvements for future consideration

            Keep analysis focused and actionable.
          # Create a comment on the repository (not PR since it's already merged)
          create_comment: false
          # Output results to be used by subsequent steps
          output_results: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR Number and Process Results
        id: process
        run: |
          # Get the latest merged PR number from commit messages
          LATEST_PR=$(git log --oneline -5 | grep -o '#[0-9]\+' | head -1 | sed 's/#//')
          echo "Latest merged PR: #$LATEST_PR"
          echo "pr_number=$LATEST_PR" >> $GITHUB_OUTPUT

          # Check if Claude Code found significant issues that need follow-up
          # This will be determined by the presence of 🔴 or 🟡 priority items in the analysis
          if echo "${{ steps.analysis.outputs.result }}" | grep -q "🔴\|🟡"; then
            echo "has_significant_issues=true" >> $GITHUB_OUTPUT
            echo "Found significant issues requiring follow-up"
          else
            echo "has_significant_issues=false" >> $GITHUB_OUTPUT
            echo "No significant issues found"
          fi

      - name: Create Issue for Code Review Findings
        if: steps.process.outputs.has_significant_issues == 'true'
        run: |
          # Create issue for code review findings
          ISSUE_BODY=$(cat << 'EOF'
          ## 🔍 Post-Merge Code Review Analysis

          This issue was automatically created after merging PR #${{ steps.process.outputs.pr_number }} to track findings from automated code review.

          ### Claude Code Analysis Results:

          ${{ steps.analysis.outputs.result }}

          ### Action Required:
          - [ ] Review 🔴 Critical items immediately
          - [ ] Address 🟡 Important items in upcoming sprints
          - [ ] Consider 🟢 Minor improvements for future releases
          - [ ] Create specific issues for complex items requiring detailed work

          ### Original PR:
          Related to: #${{ steps.process.outputs.pr_number }}

          ---
          🤖 Generated with [Claude Code](https://claude.ai/code)
          EOF
          )

          # Determine appropriate labels based on findings
          LABELS="post-merge-analysis"
          if echo "${{ steps.analysis.outputs.result }}" | grep -q "🔴"; then
            LABELS="$LABELS,priority-high,bug"
          elif echo "${{ steps.analysis.outputs.result }}" | grep -q "🟡"; then
            LABELS="$LABELS,technical-debt,enhancement"
          fi

          # Create the issue using GitHub CLI
          gh issue create \
            --title "🔍 Post-merge code review findings: PR #${{ steps.process.outputs.pr_number }}" \
            --body "$ISSUE_BODY" \
            --label "$LABELS" \
            --assignee "${{ github.event.head_commit.author.username }}"

          echo "Created issue for code review findings from PR #${{ steps.process.outputs.pr_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Analysis Tracking
        if: always()
        run: |
          echo "Post-merge analysis completed at $(date)" >> .github/analysis-log.txt
          echo "Analysis status: ${{ steps.analysis.outcome }}" >> .github/analysis-log.txt
          echo "PR analyzed: #${{ steps.process.outputs.pr_number }}" >> .github/analysis-log.txt
          echo "Has significant issues: ${{ steps.process.outputs.has_significant_issues }}" >> .github/analysis-log.txt
          if [ "${{ steps.process.outputs.has_significant_issues }}" == "true" ]; then
            echo "Created follow-up issue for PR #${{ steps.process.outputs.pr_number }}" >> .github/analysis-log.txt
          fi
          echo "Claude Code review completed" >> .github/analysis-log.txt
          echo "---" >> .github/analysis-log.txt

      - name: Commit Analysis Log
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/analysis-log.txt || true
          git commit -m "📊 Update post-merge analysis log

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"
          git push || echo "No changes to push"