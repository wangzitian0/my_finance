---
# roles/conda_setup.yml - Cross-platform conda environment setup
- name: Check if conda is installed
  command: conda --version
  register: conda_check
  changed_when: false
  failed_when: false

- name: Display conda installation status
  debug:
    msg: "{{ 'Conda found: ' + conda_check.stdout if conda_check.rc == 0 else 'Conda not installed - will install miniconda' }}"

- name: Detect operating system for conda installer
  set_fact:
    conda_installer_url: "{{ 
      'https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh' if ansible_facts['os_family'] == 'Darwin' else
      'https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh' if ansible_facts['os_family'] == 'Debian' else
      'https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh'
    }}"
    conda_install_dir: "{{ lookup('env','HOME') + '/miniconda3' }}"

- name: Download miniconda installer (with retries)
  get_url:
    url: "{{ conda_installer_url }}"
    dest: "/tmp/miniconda_installer.sh"
    mode: '0755'
    timeout: 60
  retries: 3
  delay: 10
  when: conda_check.rc != 0
  register: download_result

- name: Try alternative download method if get_url fails
  shell: |
    if [[ "{{ ansible_facts['os_family'] }}" == "Darwin" ]]; then
      curl -L --retry 3 --retry-delay 5 --connect-timeout 30 -o /tmp/miniconda_installer.sh \
        "https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" || \
      curl -L --retry 2 --retry-delay 3 --connect-timeout 30 -o /tmp/miniconda_installer.sh \
        "https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"
    else
      curl -L --retry 3 --retry-delay 5 --connect-timeout 30 -o /tmp/miniconda_installer.sh \
        "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" || \
      curl -L --retry 2 --retry-delay 3 --connect-timeout 30 -o /tmp/miniconda_installer.sh \
        "https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    fi
    chmod +x /tmp/miniconda_installer.sh
  when: conda_check.rc != 0 and (download_result.failed | default(false))
  register: curl_download

- name: Verify miniconda installer was downloaded
  stat:
    path: "/tmp/miniconda_installer.sh"
  register: installer_check
  when: conda_check.rc != 0

- name: Fail if installer download failed completely
  fail:
    msg: "Failed to download miniconda installer. Please check your internet connection and try again."
  when: conda_check.rc != 0 and not installer_check.stat.exists

- name: Install miniconda
  command: "/tmp/miniconda_installer.sh -b -p {{ conda_install_dir }}"
  args:
    creates: "{{ conda_install_dir }}/bin/conda"
  when: conda_check.rc != 0

- name: Initialize conda for current shell
  shell: "{{ conda_install_dir }}/bin/conda init bash"
  when: conda_check.rc != 0

- name: Update conda to latest version
  command: "{{ conda_install_dir }}/bin/conda update -n base -c defaults conda -y"
  when: conda_check.rc != 0

- name: Create finance environment from environment.yml
  shell: >
    {{ conda_install_dir if conda_check.rc != 0 else 'conda' }}/bin/conda env create
    -f {{ repo_dir }}/environment.yml
  args:
    creates: "{{ conda_install_dir if conda_check.rc != 0 else lookup('env','HOME') + '/.conda' }}/envs/finance"

- name: Update finance environment if it exists
  shell: >
    {{ conda_install_dir if conda_check.rc != 0 else 'conda' }}/bin/conda env update
    -f {{ repo_dir }}/environment.yml
  ignore_errors: yes

- name: Set conda environment facts
  set_fact:
    conda_base_path: "{{ conda_install_dir if conda_check.rc != 0 else lookup('env','CONDA_PREFIX') | default(lookup('env','HOME') + '/miniconda3') }}"
    finance_env_path: "{{ (conda_install_dir if conda_check.rc != 0 else lookup('env','HOME') + '/.conda') + '/envs/finance' }}"
    use_conda_env: true