# Agent Defensive Programming Standards
# HRBP Sub-Agent Optimization - Issue #181
# Mandatory defensive programming requirements for all sub-agents

standards:
  version: "1.0.0"
  effective_date: "2025-09-02"
  mandatory_compliance: true
  purpose: "Ensure all sub-agents implement comprehensive error handling and defensive programming"

# Mandatory Requirements for All Sub-Agents

mandatory_requirements:
  pre_execution_validation:
    description: "All agents must validate preconditions before executing operations"
    requirements:
      - "Check resource availability (CPU, memory, disk space)"
      - "Validate connectivity to external dependencies"
      - "Verify authentication and permissions"
      - "Confirm input data integrity and format"
      - "Test service health of dependent systems"
    implementation: "Use validation templates from common/config/sub_agent_error_templates.yml"
    
  error_handling_implementation:
    description: "All agents must implement comprehensive error handling"
    requirements:
      - "Wrap all critical operations with try-catch blocks"
      - "Implement retry logic with exponential backoff"
      - "Provide meaningful error messages with context"
      - "Log all errors with appropriate severity levels"
      - "Implement fallback mechanisms for critical failures"
    configuration_source: "common/config/agent_error_handling.yml"
    
  retry_and_fallback:
    description: "All agents must implement retry mechanisms and fallback strategies"
    requirements:
      - "Maximum 3 retry attempts with exponential backoff"
      - "Circuit breaker pattern for external service calls"
      - "Graceful degradation when primary systems fail"
      - "Cache utilization for fallback data scenarios"
      - "Alternative execution paths for critical operations"
    timeout_limits:
      database_operations: 30_seconds
      api_calls: 60_seconds
      file_operations: 15_seconds
      network_operations: 45_seconds
      
  monitoring_and_alerting:
    description: "All agents must implement comprehensive monitoring"
    requirements:
      - "Performance metrics collection and reporting"
      - "Error rate monitoring with threshold alerting"
      - "Resource usage monitoring with optimization triggers"
      - "Success/failure tracking with trend analysis"
      - "Compliance event logging with audit trails"
    alert_thresholds:
      error_rate: 5_percent
      response_time_degradation: 50_percent
      resource_utilization: 80_percent

# Agent-Specific Defensive Programming Requirements

agent_specific_standards:
  backend_architect_agent:
    critical_areas:
      - "Database connection management with health checks"
      - "RAG system component validation before operations"
      - "Vector database connectivity with failover mechanisms"
      - "Semantic processing with model availability checks"
      - "Architecture validation with rollback capabilities"
    failure_scenarios:
      database_connection: "Switch to read-only replica or cached data"
      rag_system_failure: "Use simplified retrieval with cached embeddings"
      vector_db_timeout: "Enable circuit breaker and use local cache"
      
  data_engineer_agent:
    critical_areas:
      - "SEC Edgar API rate limiting and error handling"
      - "YFinance data validation with fallback sources"
      - "ETL pipeline checkpointing for resumable operations"
      - "Embedding generation with model failover"
      - "Build artifact integrity with backup strategies"
    failure_scenarios:
      api_rate_limit: "Implement intelligent backoff and caching"
      data_corruption: "Rollback to last known good state"
      pipeline_failure: "Resume from last successful checkpoint"
      
  security_engineer_agent:
    critical_areas:
      - "Authentication service availability with offline cache"
      - "Encryption key management with backup HSMs"
      - "Compliance validation with audit trail integrity"
      - "Security monitoring with incident response automation"
      - "Vulnerability scanning with scanner failover"
    failure_scenarios:
      auth_service_down: "Use cached credentials with time limits"
      key_unavailable: "Switch to backup key management system"
      compliance_failure: "Queue for manual review with alert"
      
  performance_engineer_agent:
    critical_areas:
      - "Resource monitoring with automatic optimization"
      - "Performance testing with environment validation"
      - "Database optimization with rollback capabilities"
      - "Application monitoring with auto-remediation"
      - "Load testing with failure scenario handling"
    failure_scenarios:
      resource_exhaustion: "Trigger automatic scaling and optimization"
      performance_degradation: "Enable circuit breaker and notify operations"
      monitoring_failure: "Switch to backup monitoring systems"

# Implementation Guidelines

implementation_guidelines:
  error_handler_integration:
    step_1: "Import AgentErrorHandler from common/config/sub_agent_error_templates.yml"
    step_2: "Initialize error handler in agent constructor with agent name"
    step_3: "Wrap all critical operations with error handler decorators"
    step_4: "Implement agent-specific validation and fallback methods"
    step_5: "Configure monitoring and alerting based on agent requirements"
    
  code_example: |
    ```python
    from common.config.sub_agent_error_templates import AgentErrorHandler
    
    class MyAgent:
        def __init__(self):
            self.error_handler = AgentErrorHandler(self.__class__.__name__.lower())
            self.config = self.error_handler.load_error_config()
            
        def execute_critical_operation(self, data):
            # Pre-execution validation
            validation_checks = {
                'input_data': lambda: self.validate_input(data),
                'resources': lambda: self.check_resources(),
                'connectivity': lambda: self.test_connectivity()
            }
            
            if not self.error_handler.validate_preconditions(validation_checks):
                raise ValueError("Precondition validation failed")
            
            # Execute with retry and fallback
            @self.error_handler.with_retry(max_retries=3)
            def primary_operation():
                return self.process_data(data)
                
            return self.error_handler.execute_with_fallback(
                primary_operation,
                lambda: self.fallback_operation(data)
            )
    ```
    
  validation_checklist:
    - "All external dependencies have connectivity validation"
    - "All database operations have connection health checks"
    - "All API calls have timeout and retry mechanisms"
    - "All file operations have permission and space validation"
    - "All critical paths have fallback alternatives implemented"

# Quality Assurance and Compliance

quality_assurance:
  code_review_requirements:
    - "Error handling patterns follow established templates"
    - "All exceptions are caught and handled appropriately"
    - "Logging includes sufficient context for debugging"
    - "Retry logic uses configured backoff strategies"
    - "Fallback mechanisms are tested and functional"
    
  testing_requirements:
    unit_tests:
      - "Error injection testing for all critical paths"
      - "Retry mechanism validation with simulated failures"
      - "Fallback strategy testing with dependency unavailability"
      - "Timeout handling validation with controlled delays"
      
    integration_tests:
      - "End-to-end error handling with real service failures"
      - "Circuit breaker behavior under sustained failures"
      - "Resource exhaustion handling with actual constraints"
      - "Performance impact assessment of error handling overhead"
      
  monitoring_validation:
    - "Error rates are tracked and within acceptable thresholds"
    - "Performance metrics show no significant degradation"
    - "Alert mechanisms trigger appropriately for error conditions"
    - "Recovery times meet defined service level objectives"

# Compliance and Audit Requirements

compliance_framework:
  regulatory_requirements:
    financial_industry:
      - "All financial operations have comprehensive audit trails"
      - "Error handling meets SOX compliance requirements"
      - "Data integrity is maintained during error recovery"
      - "Risk management processes include error handling validation"
      
    data_protection:
      - "Personal data handling includes privacy-preserving error recovery"
      - "Data breach scenarios have defined containment procedures"
      - "Encryption key failures have secure backup mechanisms"
      - "Audit logs are tamper-proof and continuously available"
      
  audit_trail_requirements:
    - "All errors are logged with timestamp, context, and severity"
    - "Recovery actions are documented with success/failure status"
    - "Performance impact is measured and reported"
    - "Compliance violations trigger immediate escalation"

# Performance Impact Guidelines

performance_guidelines:
  overhead_limits:
    error_handling_overhead: "<2% additional latency"
    memory_overhead: "<5% additional memory usage"
    cpu_overhead: "<3% additional CPU utilization"
    storage_overhead: "<1% additional storage for logs"
    
  optimization_strategies:
    - "Lazy initialization of error handling components"
    - "Efficient logging with asynchronous writes"
    - "Minimal overhead retry mechanisms with smart backoff"
    - "Connection pooling to reduce connection establishment overhead"
    
  monitoring_requirements:
    - "Continuous monitoring of error handling performance impact"
    - "Automated optimization when overhead exceeds thresholds"
    - "Regular performance baseline updates with error handling enabled"
    - "Cost-benefit analysis of error handling vs. reliability improvements"

# Success Metrics and KPIs

success_metrics:
  reliability_improvements:
    target_failure_rate: "<5% for all agents"
    mean_time_to_recovery: "<30 seconds"
    availability_target: ">99.9% uptime"
    error_detection_accuracy: ">95%"
    
  operational_efficiency:
    manual_intervention_reduction: ">80%"
    automated_recovery_success: ">85%"
    incident_response_time: "<2 minutes"
    compliance_audit_readiness: "100%"
    
  business_impact:
    user_experience_improvement: "Consistent performance under error conditions"
    regulatory_compliance: "Enhanced audit trails and error documentation"
    competitive_advantage: "Industry-leading reliability standards"
    cost_optimization: "Reduced operational overhead through automation"

# Continuous Improvement Process

improvement_process:
  regular_reviews:
    weekly: "Error pattern analysis and threshold adjustments"
    monthly: "Performance impact assessment and optimization"
    quarterly: "Comprehensive framework evaluation and updates"
    annually: "Strategic error handling capability roadmap"
    
  feedback_mechanisms:
    automated_analysis: "ML-based error pattern identification"
    human_feedback: "Operations team error handling experience"
    performance_monitoring: "Continuous performance impact tracking"
    compliance_validation: "Regular compliance audit validation"
    
  evolution_strategy:
    emerging_patterns: "New error patterns incorporated into templates"
    technology_updates: "Framework updates for new technologies and dependencies"
    regulatory_changes: "Compliance requirement updates reflected in standards"
    performance_optimization: "Continuous optimization based on real-world performance data"

effective_date: "2025-09-02"
mandatory_compliance_date: "2025-09-16" # 14 days for implementation
review_cycle: "Quarterly with monthly progress assessments"
responsible_authority: "HRBP Agent - Organizational Excellence"