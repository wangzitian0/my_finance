#!/usr/bin/env sh

set -e

REPO_ROOT="$(cd "$(dirname "$0")" && pwd)"
cd "$REPO_ROOT"

usage() {
  cat <<EOF
p3 - Unified developer commands (my_finance)

Usage:
  p3 <command> [args...]

Environment Management:
  env setup              Initial environment setup (Podman, Neo4j)
  env start              Start all services
  env stop               Stop all services 
  env status             Check environment status
  env reset              Reset everything (destructive)

Container Management:
  podman status          Check container status
  neo4j logs             View Neo4j logs
  neo4j connect          Connect to Neo4j shell
  neo4j restart          Restart Neo4j container
  neo4j stop             Stop Neo4j container
  neo4j start            Start Neo4j container

Development Commands:
  activate               Activate pixi environment (alias for pixi shell)
  format                 Format code (black + isort)
  lint                   Lint code (pylint)
  typecheck              Type check with mypy
  test                   Run tests (pytest)
  e2e                    End-to-end validation
  build run [scope]      Build dataset (default: m7)
  fast-build [scope]     Fast build with deepseek-r1:1.5b (testing)
  refresh [scope]        Alias for build run

Build Management:
  create-build           Create timestamped build directory
  release-build          Promote latest build to release
  clean                  Clean local build artifacts
  build-status           Check build status

Workflow Management:
  create-pr "TITLE" ISSUE  Create/update PR with mandatory testing
  commit-data-changes    Stage data directory changes
  cleanup-branches       Clean merged branches
  shutdown-all           Stop all services

Status & Validation:
  status                 Quick environment status
  cache-status           Check cache status
  verify-env             Verify environment dependencies
  check-integrity        Check data integrity

Scopes: f2 m7 n100 v3k (default: m7)

Tips:
  - Add completion: source ./scripts/p3-completion.zsh
  - Add to PATH:    export PATH="$REPO_ROOT:$PATH"
  - All commands route through pixi tasks defined in pixi.toml
EOF
}

cmd_activate() {
  echo "📦 Activating pixi environment..."
  echo "Run: pixi shell"
  echo "Note: This command needs to be run directly as 'pixi shell'"
  exit 0
}

cmd_create_pr() {
  title="$1"; shift || true
  issue="$1"; shift || true
  if [ -z "$title" ] || [ -z "$issue" ]; then
    echo "Error: title and issue number are required" >&2
    exit 2
  fi
  pixi run create-pr "$title" "$issue" "$@"
}

cmd_e2e() {
  scope="${1:-m7}"
  
  case "$scope" in
    f2|test) 
      echo "🧪 Running F2 end-to-end test with DeepSeek 1.5b (fast mode)..."
      cmd_fast_build f2
      ;;
    m7)
      echo "🧪 Running M7 end-to-end test with DeepSeek 1.5b (fast mode)..."
      pixi run test-e2e
      ;;
    n100|nasdaq100)
      echo "🧪 Running N100 end-to-end test with DeepSeek 1.5b (fast mode)..."
      cmd_fast_build n100
      ;;
    v3k|vti)
      echo "🧪 Running V3K end-to-end test with DeepSeek 1.5b (fast mode)..."
      cmd_fast_build v3k
      ;;
    *)
      echo "🧪 Running default M7 end-to-end test with DeepSeek 1.5b (fast mode)..."
      pixi run test-e2e
      ;;
  esac
}

cmd_refresh() {
  scope="${1:-m7}"
  
  # Handle special options
  if [ "$1" = "--dry-run" ] || [ "$2" = "--dry-run" ]; then
    echo "🔍 Regular build dry-run validation for $scope:"
    echo "   ✅ Production configuration: data/llm/configs/local_ollama.yml (default)"
    echo "   ✅ Command would run: pixi run build-$scope"
    echo "   📝 This would use gpt-oss:20b model (production quality)"
    return 0
  fi
  
  case "$scope" in
    f2|m7|n100|v3k) ;;
    *) echo "Invalid scope: $scope (expected one of: f2 m7 n100 v3k)" >&2; exit 2;;
  esac
  pixi run "build-$scope"
}

cmd_build() {
  if [ "$1" = "run" ]; then
    shift
    cmd_refresh "$@"
  else
    cmd_refresh "$@"
  fi
}

cmd_fast_build() {
  scope="${1:-m7}"
  
  # Handle special options
  if [ "$1" = "--dry-run" ] || [ "$2" = "--dry-run" ]; then
    echo "🔍 Fast build dry-run validation for $scope:"
    echo "   ✅ DeepSeek 1.5b configuration: data/llm/configs/deepseek_fast.yml"
    echo "   ✅ Environment variables: DCF_FAST_MODE=true"
    echo "   ✅ Command would run: pixi run build-$scope"
    echo "   📝 This would use deepseek-r1:1.5b model (NOT gpt-oss:20b)"
    return 0
  fi
  
  case "$scope" in
    f2|m7|n100|v3k) ;;
    *) echo "Invalid scope: $scope (expected one of: f2 m7 n100 v3k)" >&2; exit 2;;
  esac
  
  echo "🚀 Starting fast build with deepseek-r1:1.5b for $scope..."
  echo "   Configuration: deepseek_fast.yml"
  
  # Check if deepseek-r1:1.5b model exists
  if ! ollama list | grep -q "deepseek-r1:1.5b"; then
    echo "⚠️  deepseek-r1:1.5b model not found. Please install it with:"
    echo "    ollama pull deepseek-r1:1.5b"
    exit 1
  fi
  
  # Use fast-build pixi task with --fast-mode parameter
  echo "   Using DeepSeek 1.5b fast mode for accelerated testing..."
  
  pixi run "fast-build-$scope"
}

# Environment management
cmd_env() {
  case "$1" in
    setup) pixi run setup-env ;;
    start) pixi run env-start ;;
    stop) pixi run env-stop ;;
    status) pixi run env-status ;;
    reset) pixi run env-reset ;;
    *) echo "Unknown env command: $1" >&2; exit 2 ;;
  esac
}

# Container management
cmd_podman() {
  case "$1" in
    status) pixi run podman-status ;;
    *) echo "Unknown podman command: $1" >&2; exit 2 ;;
  esac
}

cmd_neo4j() {
  case "$1" in
    logs) pixi run neo4j-logs ;;
    connect) pixi run neo4j-connect ;;
    restart) pixi run neo4j-restart ;;
    stop) pixi run neo4j-stop ;;
    start) pixi run neo4j-start ;;
    *) echo "Unknown neo4j command: $1" >&2; exit 2 ;;
  esac
}

# Development commands
cmd_format() {
  pixi run format
}

cmd_lint() {
  pixi run lint
}

cmd_test() {
  pixi run test
}

cmd_typecheck() {
  pixi run typecheck
}

# Build management
cmd_create_build() {
  pixi run create-build
}

cmd_release_build() {
  pixi run release-build
}

cmd_build_status() {
  pixi run build-status
}

# Workflow management
cmd_commit_data_changes() {
  pixi run commit-data-changes
}

cmd_cleanup_branches() {
  if [ "$1" = "--dry-run" ]; then
    pixi run cleanup-branches-dry-run
  elif [ "$1" = "--auto" ]; then
    pixi run cleanup-branches-auto
  else
    pixi run cleanup-branches
  fi
}

cmd_shutdown_all() {
  pixi run shutdown-all
}

cmd_clean() {
  pixi run clean
}

# Status & Validation commands
cmd_status() {
  pixi run status
}

cmd_cache_status() {
  pixi run cache-status
}

cmd_verify_env() {
  pixi run verify-environment
}

cmd_check_integrity() {
  pixi run check-data-integrity
}

case "$1" in
  # Pixi environment activation
  activate) shift; cmd_activate "$@" ;;
  
  # Environment management
  env) shift; cmd_env "$@" ;;
  
  # Container management
  podman) shift; cmd_podman "$@" ;;
  neo4j) shift; cmd_neo4j "$@" ;;
  
  # Development commands
  format) shift; cmd_format "$@" ;;
  lint) shift; cmd_lint "$@" ;;
  typecheck) shift; cmd_typecheck "$@" ;;
  test) shift; cmd_test "$@" ;;
  e2e) shift; cmd_e2e "$@" ;;
  build) shift; cmd_build "$@" ;;
  fast-build) shift; cmd_fast_build "$@" ;;
  refresh) shift; cmd_refresh "$@" ;;
  
  # Build management
  create-build) shift; cmd_create_build "$@" ;;
  release-build) shift; cmd_release_build "$@" ;;
  clean) shift; cmd_clean "$@" ;;
  build-status) shift; cmd_build_status "$@" ;;
  
  # Workflow management
  create-pr) shift; cmd_create_pr "$@" ;;
  commit-data-changes) shift; cmd_commit_data_changes "$@" ;;
  cleanup-branches) shift; cmd_cleanup_branches "$@" ;;
  shutdown-all) shift; cmd_shutdown_all "$@" ;;
  
  # Status & Validation
  status) shift; cmd_status "$@" ;;
  cache-status) shift; cmd_cache_status "$@" ;;
  verify-env) shift; cmd_verify_env "$@" ;;
  check-integrity) shift; cmd_check_integrity "$@" ;;
  
  
  # Help
  -h|--help|help|"") usage ;;
  *) echo "Unknown command: $1" >&2; usage; exit 2 ;;
esac


