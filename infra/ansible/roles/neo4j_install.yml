---
# roles/neo4j_install.yml
- name: Check if Pixi is installed
  command: pixi --version
  register: pixi_check
  changed_when: false
  failed_when: false

- name: Ensure Pixi environment is set up
  command: pixi install
  args:
    chdir: "{{ playbook_dir }}/.."
  when: pixi_check.rc == 0

- name: Check if Java is available in Pixi environment
  shell: |
    eval "$(pixi shell-hook)" && java -version
  register: java_check
  changed_when: false
  failed_when: false
  args:
    chdir: "{{ playbook_dir }}/.."

- name: Display Java version from Pixi environment
  debug:
    msg: "Java is available in Pixi environment: {{ java_check.stdout_lines | default('Not found') }}"
  when: java_check.rc == 0

- name: Download Neo4j using Pixi task
  shell: |
    eval "$(pixi shell-hook)" && pixi run neo4j-download
  args:
    chdir: "{{ playbook_dir }}/.."
  when: pixi_check.rc == 0

- name: Setup Neo4j using Pixi task
  shell: |
    eval "$(pixi shell-hook)" && pixi run neo4j-setup
  args:
    chdir: "{{ playbook_dir }}/.."
  when: pixi_check.rc == 0

- name: Start Neo4j using Pixi task
  shell: |
    eval "$(pixi shell-hook)" && pixi run neo4j-start
  register: neo4j_start
  failed_when: (neo4j_start.rc != 0) and ("Neo4j is already running" not in neo4j_start.stderr)
  args:
    chdir: "{{ playbook_dir }}/.."
  when: pixi_check.rc == 0

- name: Check Neo4j service status using Pixi task
  shell: |
    eval "$(pixi shell-hook)" && pixi run neo4j-status
  register: neo4j_status
  changed_when: false
  args:
    chdir: "{{ playbook_dir }}/.."
  when: pixi_check.rc == 0

- name: Display Neo4j service status
  debug:
    var: neo4j_status.stdout_lines
  when: pixi_check.rc == 0 and neo4j_status is defined
